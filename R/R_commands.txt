#Here are a list of r commands that I think are important to note and that I find useful


#Reading in a file

read.csv

#Listing files
list.files(path = "your/directory/path"

#Renaming a column
colnames(df)[colnames(df) == "old" ] <- "New name"

#Making a dictionary
SetNames (list1, list2)

#Dropping a column
df$column_name <- NULL

#Selecting a row
table[rowname, column] #or# table[rowname,]

#Summary statistics:
Summary()
Mean()
sd()
var()
min(), max()
quantile()

#Finding a string within a string
grepl(string)


#List applies
lapply(list or df, function, optional argument) <- always returns a list. Iterates through each element of x and applies the funciton to it

sapply() <- tries to simplify the output to a vector or matrix if possible

vapply() <- similar to sapply but requires you to specify expected data type

mapply() <- multivvariate version of lapply. Applies function to multiple vectors and list

#filling all na values in R
df[is.na(df)] <- "Unknown"


#To make bottom margins longer for plots
par(mar = c(8, 4, 4, 2) + 1.0)

#Selecting only columns that start with "O" in R
df_selected <- df %>% select(starts_with("0"))

#Selecting the column names that contain a letter
df_selected <- df %>% select(which(grepl("M", names(df))))

#Selecting a specific row
df[row, ]

#Making dataframe with columns you will use later
metadata <- data.frame(Samples = colnames(Samples), Sex = "Unk", Ancestry = "Unk")

#Making dataframe based on sample name
metadata <- metadata %>% mutate(
    Sex = case_when(
      grepl("M", Samples) ~ "M",
      grepl("F", Samples) ~ "F",
      TRUE ~ Sex
    ),
    Ancestry = case_when(
      grepl("EA", Samples) ~ "EA",
      grepl("AA", Samples) ~ "AA",
      TRUE ~ Ancestry
  )
)

#For loop in R
for (x in y){
print(x)
}

#Pivot function. Saved me a bunch of fucking time holy shit. Pissed off lowkey
pivot_wider to merge all on the same values of one column. 


#Deleting multiple columns at once:
MS_lupus_joined_data <- MS_lupus_joined_data[ , !(names(MS_lupus_joined_data) %in% c('Sample date', 'History Number')) ]

#Running a t-test based on 


#Counting number in a list: length()


#I have a dataframe with corresponding rows with columns I wish to add another dataframe with the same rows at the same row value


#Making a dataframe of all the gene names in an annotation plot:
df_long <- tidyr::separate_rows(df_annotations, geneID, sep = "/" )


#Selecting only the sections of the dataframe from a column value you are interested in. 
MS_Lupus_data[MS_Lupus_data[["Protein FDR Confidence: Combined"]] == "High", ]




